<?php

use Slim\Http\Request;
use Slim\Http\Response;

function get_airtable_data($requested_data) {
	// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
	$ch = curl_init();

	curl_setopt($ch, CURLOPT_URL, "https://api.airtable.com/v0/app6UsNDqzrkDiJGn/".$requested_data."?view=Grid%20view");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");

	$headers = array();
	$headers[] = "Authorization: Bearer keyzrFNGCPmI6lZG9";
	curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

	$result = curl_exec($ch);
	if (curl_errno($ch)) {
	    return FALSE;
	}
	curl_close ($ch);

	return json_decode($result, TRUE);
}

//Work out the average of the judges scores.
function calculate_average($index, $scores)
{
	$count = $total = 0;

	foreach ($scores as $value) {
		$count++;

		$total += $value[$index];
	}

	return $total/$count;
}

function get_pie_ratings() {
	/**
	 * An algorithm to work out the final rating of a mince pie based on looks
	 * taste and price per pie.
	 **/
	define("TASTE_RATIO", 0.8);
	define("LOOKS_RATIO", 0.2);
	define("PI_SQUARED", pow(pi(),2));

	$reviews = get_airtable_data('Reviews');
	$pies = get_airtable_data('Pies');

	$pie_gradings = array();
	foreach ($pies['records'] as $pie) {
		$pie_gradings[$pie['id']] = array(
			'name' => $pie['fields']['Pie Name'],
			'ppp' => $pie['fields']['Pennies per pie'],
			'tasting_notes' => array(),
			'scores' => array()
		);
	}

	foreach ($reviews['records'] as $review) {
		$pie_id = $review['fields']['Pie Name'][0];
		
		if (!empty($review['fields']['Tasting notes'])) {
			$pie_gradings[$pie_id]['tasting_notes'][] = $review['fields']['Tasting notes'];
		}

		$pie_gradings[$pie_id]['scores'][] = array(
			't' => (int)$review['fields']['Taste'],
			'l' => (int)$review['fields']['Looks']
		);
	}

	// evaluate the pies!
	foreach ($pie_gradings as $pie_id => $values) {

		// Find the average of the scores
		$average_taste = calculate_average('t', $values['scores']);
		$average_loook = calculate_average('l', $values['scores']);

		$pie_value = round( ( (TASTE_RATIO*$average_taste) + (LOOKS_RATIO*$average_loook) ) - ($values['ppp']/PI_SQUARED));
		$pie_raw_value = ( (TASTE_RATIO*$average_taste) + (LOOKS_RATIO*$average_loook) ) - ($values['ppp']/PI_SQUARED);

		$pie_gradings[$pie_id]['averages'] = array(
			'rating' => $pie_value,
			'non_rounded_rating' => number_format($pie_raw_value, 2, '.', '')
		);
		$ratings[] = $pie_raw_value;
	}	

	array_multisort($ratings, SORT_DESC, $pie_gradings);

	return $pie_gradings;
}

// Routes
$app->get('/', function (Request $request, Response $response, array $args) {
	$args['pies'] = get_pie_ratings();

	$args['instagram'] = array();

	$data = file_get_contents("https://www.instagram.com/mincepierating/?__a=1");
	$data = json_decode($data);

	$args['profile_pic'] = $data->user->profile_pic_url_hd;

	$images = $data->user->media->nodes;
	foreach ($images as $image) {
		$args['instagram'][] = array(
			'image' => $image->display_src,
			'caption' => $image->caption
		);
	}

    // Render index view
    return $this->renderer->render($response, 'index.phtml', $args);
});

$app->get('/json', function (Request $request, Response $response, array $args) {
	$pies = get_pie_ratings();

    // Render index view
    return $response->withJson($pies);
});


$app->get('/chatbot', function (Request $request, Response $response, array $args) {
	
	// // $request_body = json_decode($request->body);
	// // $action = $request_body->action;

	// $return_data = json_decode ('{
	// 		"speech": "Barack Hussein Obama II was the 44th and current President of the United States.",
	// 		"displayText": "Barack Hussein Obama II was the 44th and current President of the United States, and the first African American to hold the office. Born in Honolulu, Hawaii, Obama is a graduate of Columbia University   and Harvard Law School, where ",
	// 		"data": {},
	// 		"contextOut": [],
	// 		"source": "DuckDuckGo"
	// 		}', TRUE);

	// $pies = get_pie_ratings();
	// $return_data['data'] = $pies;

 //    // Render index view
 //    return $response->withJson(array('body' => $return_data));
});

