<?php

/**
* 
*/
class Mincepie
{	
	const TASTE_RATIO 	= 0.8;
	const LOOKS_RATIO 	= 0.2;
	const PI_SQUARED = 9.8696044010894; //pow(pi(),2)

	function __construct() {}

	function get_airtable_API_key() {
		return file_get_contents(getcwd().'/airtable-api-key.txt', TRUE);
	}

	function get_airtable_data($requested_data) {
		// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
		$ch = curl_init();

		curl_setopt($ch, CURLOPT_URL, "https://api.airtable.com/v0/app6UsNDqzrkDiJGn/".$requested_data."?view=Grid%20view");
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");

		$api_key = $this->get_airtable_API_key();

		$headers = array();
		$headers[] = "Authorization: Bearer ".$api_key;
		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

		$result = curl_exec($ch);
		if (curl_errno($ch)) {
		    return FALSE;
		}
		curl_close ($ch);

		return json_decode($result, TRUE);
	}

	//Work out the average of the judges scores.
	function calculate_average($index, $scores)
	{
		$count = $total = 0;

		foreach ($scores as $value) {
			$count++;

			$total += $value[$index];
		}

		return $total/$count;
	}

	function calculate_rating($average_taste, $average_loook, $ppp)
	{
		return ( (SELF::TASTE_RATIO*$average_taste) + (SELF::LOOKS_RATIO*$average_loook) ) - ($ppp/SELF::PI_SQUARED);
	}	

	function get_pie_ratings() {
		$reviews = $this->get_airtable_data('Reviews');
		$pies = $this->get_airtable_data('Pies');

		$pie_gradings = array();
		foreach ($pies['records'] as $pie) {
			$pie_gradings[$pie['id']] = array(
				'name' => $pie['fields']['Pie Name'],
				'ppp' => $pie['fields']['Pennies per pie'],
				'tasting_notes' => array(),
				'scores' => array()
			);
		}

		foreach ($reviews['records'] as $review) {
			$pie_id = $review['fields']['Pie Name'][0];
			
			if (!empty($review['fields']['Tasting notes'])) {
				$pie_gradings[$pie_id]['tasting_notes'][] = $review['fields']['Tasting notes'];
			}

			$pie_gradings[$pie_id]['scores'][] = array(
				't' => (int)$review['fields']['Taste'],
				'l' => (int)$review['fields']['Looks']
			);
		}

		// evaluate the pies!
		foreach ($pie_gradings as $pie_id => $values) {

			// Find the average of the scores
			$average_taste = $this->calculate_average('t', $values['scores']);
			$average_loook = $this->calculate_average('l', $values['scores']);

			$pie_raw_value = $this->calculate_rating($average_taste, $average_loook, $values['ppp']);
			$pie_rounded_value = round( $pie_raw_value );
			
			$pie_gradings[$pie_id]['averages'] = array(
				'rating' => $pie_rounded_value,
				'non_rounded_rating' => number_format($pie_raw_value, 2, '.', '')
			);
			$ratings[] = $pie_raw_value;
		}	

		// Sort pies by their ratings
		array_multisort($ratings, SORT_DESC, $pie_gradings);

		return $pie_gradings;
	}


}